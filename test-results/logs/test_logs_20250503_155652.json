{
  "logs": [
    {
      "timestamp": "2025-05-03T15:56:51.416853",
      "level": "INFO",
      "message": "Starting test session",
      "metadata": {
        "test_dir": "/Users/admin/Documents/PersonalProjects/bittensor/analytics_framework/test-results"
      }
    },
    {
      "timestamp": "2025-05-03T15:56:51.612163",
      "level": "INFO",
      "message": "Test session completed",
      "metadata": {}
    },
    {
      "timestamp": "2025-05-03T15:56:51.954393",
      "level": "INFO",
      "message": "Test session finished with exit status 1",
      "metadata": {
        "exitstatus": 1,
        "test_counts": {
          "total": 1,
          "passed": 0,
          "failed": 1,
          "skipped": 0,
          "errors": 0
        },
        "duration": 0.5751030445098877,
        "failed_tests": [
          {
            "name": "tests/unit/validator/test_forward.py::TestForward::test_forward",
            "duration": 0.004027499999210704,
            "error_message": "self = <test_forward.TestForward object at 0x125c37b20>\nmock_generate = <MagicMock name='generate_conversation' id='4928520928'>\nmock_get_uids = <MagicMock name='get_random_uids' id='4928089600'>\nsample_features = {'agent_messages_count': 7, 'avg_agent_response_time_seconds': 7.5, 'avg_entity_confidence': 0.87, 'avg_message_length_agent': 55.6, ...}\n\n    @pytest.mark.asyncio\n    @patch('conversion_subnet.utils.uids.get_random_uids')\n    @patch('conversion_subnet.validator.generate.generate_conversation')\n    async def test_forward(self, mock_generate, mock_get_uids, sample_features):\n        \"\"\"Test the main forward function.\"\"\"\n        # Mock the validator\n        validator = MagicMock()\n        validator.config = MagicMock()\n        validator.config.neuron = MagicMock()\n        validator.dendrite = AsyncMock()\n        validator.metagraph = MagicMock()\n        validator.metagraph.axons = [MagicMock() for _ in range(3)]\n        validator.update_scores = MagicMock()\n        validator.conversation_history = {}\n    \n        # Set up mocks\n        mock_get_uids.return_value = [0, 1, 2]\n        mock_generate.return_value = sample_features\n    \n        # Mock the validate_features function\n        with patch('conversion_subnet.validator.utils.validate_features', return_value=sample_features):\n            # Mock responses\n            responses = []\n            for i in range(3):\n                response = ConversionSynapse(\n                    features=sample_features,\n                    prediction={'conversion_happened': 1, 'time_to_conversion_seconds': 70.0},\n                    confidence=0.8,\n                    response_time=5.0,\n                    miner_uid=i\n                )\n                responses.append(response)\n            validator.dendrite.query.return_value = responses\n    \n            # Create a mock ground truth\n            ground_truth = {'conversion_happened': 1, 'time_to_conversion_seconds': 60.0}\n    \n            # Mock the generate_ground_truth function\n>           with patch('conversion_subnet.validator.forward.generate_ground_truth', return_value=ground_truth):\n\ntests/unit/validator/test_forward.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../../.pyenv/versions/3.10.15/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x125c97e80>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <function forward at 0x122b84a60> does not have the attribute 'generate_ground_truth'\n\n../../../../.pyenv/versions/3.10.15/lib/python3.10/unittest/mock.py:1420: AttributeError"
          }
        ]
      }
    }
  ],
  "metadata": {
    "generated_at": "2025-05-03T15:56:52.043396",
    "log_count": 3
  }
}