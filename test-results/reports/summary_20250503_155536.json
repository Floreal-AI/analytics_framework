{
  "exitstatus": 1,
  "test_counts": {
    "total": 3,
    "passed": 2,
    "failed": 1,
    "skipped": 0,
    "errors": 0
  },
  "duration": 0.601499080657959,
  "failed_tests": [
    {
      "name": "tests/integration/test_miner_validator.py::TestMinerValidatorIntegration::test_miner_validator_end_to_end",
      "duration": 0.0019974579990957864,
      "error_message": "self = <test_miner_validator.TestMinerValidatorIntegration object at 0x11dcf1c60>\nmock_miner = <conversion_subnet.miner.miner.BinaryClassificationMiner object at 0x11dcf0a90>\nsample_features = {'agent_messages_count': 7, 'avg_agent_response_time_seconds': 7.5, 'avg_entity_confidence': 0.87, 'avg_message_length_agent': 55.6, ...}\n\n    async def test_miner_validator_end_to_end(self, mock_miner, sample_features):\n        \"\"\"Test end-to-end flow from validator query to miner to reward calculation.\"\"\"\n        # Create a mock validator with dendrite\n        validator = MagicMock()\n        validator.dendrite = AsyncMock()\n        validator.metagraph = MagicMock()\n        validator.metagraph.axons = [MagicMock()]\n        validator.update_scores = MagicMock()\n        validator.conversation_history = {}\n    \n        # Create a special implementation of forward for testing\n        async def mock_forward(validator):\n            # Create a mocked ground truth\n            ground_truth = {'conversion_happened': 1, 'time_to_conversion_seconds': 60.0}\n    \n            # Create a sample synapse with features\n            synapse = ConversionSynapse(features=sample_features)\n    \n            # Expected response from miner\n            expected_output = {\n                'conversion_happened': 1,\n                'time_to_conversion_seconds': 60.0,\n                'confidence': 0.8\n            }\n    \n            # Create a mock response\n            response = ConversionSynapse(\n                features=sample_features,\n                prediction=expected_output,\n                confidence=expected_output['confidence'],\n                response_time=10.0,\n                miner_uid=0\n            )\n    \n            # Set up validator.dendrite to return this response\n            validator.dendrite.query.return_value = [response]\n    \n            # Call validator.update_scores\n            validator.update_scores(ground_truth, [response])\n    \n            # Update conversation history\n            validator.conversation_history[sample_features['session_id']] = ground_truth\n    \n            return [response]\n    \n        # Test our mock forward implementation\n>       with patch('conversion_subnet.validator.forward.forward', side_effect=mock_forward):\n\ntests/integration/test_miner_validator.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../../.pyenv/versions/3.10.15/lib/python3.10/unittest/mock.py:1447: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x11dd882e0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <function forward at 0x11b784a60> does not have the attribute 'forward'\n\n../../../../.pyenv/versions/3.10.15/lib/python3.10/unittest/mock.py:1420: AttributeError"
    }
  ]
}